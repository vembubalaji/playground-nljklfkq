package com.tu.hibernate.entity;
// Generated Oct 18, 2018 11:18:50 AM by Hibernate Tools 5.2.11.Final

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.ColumnResult;
import javax.persistence.Entity;
import javax.persistence.EntityResult;
import javax.persistence.FetchType;
import javax.persistence.FieldResult;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.Table;

import org.hibernate.annotations.NamedNativeQuery;

/**
 * Domain generated by hbm2java
 */
@Entity
@Table(name = "domain")

@SqlResultSetMapping(
		name = "DomainResult", 
		entities = {
				@EntityResult(entityClass = com.tu.hibernate.entity.Domain.class, 
				fields = {@FieldResult(name = "domainId", column = "id"), 
						  @FieldResult(name = "domainName", column = "name") })})

@SqlResultSetMapping(name="resultMapper", columns = { @ColumnResult(name = "userName"), @ColumnResult(name = "teamName"), @ColumnResult(name = "domainName")})

@NamedNativeQuery(name = "3tableJoin", query = "select u.name as userName, t.teamName as teamName, d.domainName as domainName from user u "
		+ "left outer join team t on u.team_id=t.team_id "
		+ "left outer join domain d on u.domain_id=d.domain_id where u.user_id=?"  ,resultSetMapping = "resultMapper")
public class Domain implements java.io.Serializable {

	private int domainId;
	private String domainName;
	private Set<User> users = new HashSet<User>(0);

	public Domain() {
	}

	public Domain(int domainId, String domainName) {
		this.domainId = domainId;
		this.domainName = domainName;
	}

	public Domain(int domainId, String domainName, Set<User> users) {
		this.domainId = domainId;
		this.domainName = domainName;
		this.users = users;
	}

	@Id

	@Column(name = "domain_id", unique = true, nullable = false)
	public int getDomainId() {
		return this.domainId;
	}

	public void setDomainId(int domainId) {
		this.domainId = domainId;
	}

	@Column(name = "domainName", nullable = false)
	public String getDomainName() {
		return this.domainName;
	}

	public void setDomainName(String domainName) {
		this.domainName = domainName;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "domain")
	public Set<User> getUsers() {
		return this.users;
	}

	public void setUsers(Set<User> users) {
		this.users = users;
	}

}
